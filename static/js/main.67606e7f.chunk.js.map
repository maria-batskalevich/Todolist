{"version":3,"sources":["api/task-api.ts","reportWebVitals.ts","state/tasks-reducer.ts","api/todolist-api.ts","state/todolists-reducer.ts","state/store.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","AppWithRedux.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","taskApi","todolistId","get","title","post","taskId","delete","model","put","initialState","updateTaskTC","domainModel","dispatch","getState","task","tasks","find","t","id","apiModel","deadline","description","priority","startDate","status","res","type","updateTaskAC","console","warn","todolistAPI","rootReducer","combineReducers","state","action","stateCopy","filter","todoListId","map","copyState","todolists","tl","newTodolist","todolist","store","createStore","applyMiddleware","thunk","window","AddItemForm","React","memo","props","log","useState","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","data","items","setTaskAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","AppWithRedux","useSelector","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","removeTodolistAC","changeTodolistTitleAC","ChangeTodolistTitleTC","addTodolist","addTodolistTC","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","padding","spacing","Paper","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67606e7f.chunk.js","sourcesContent":["import axios, {AxiosResponse} from \"axios\";\n\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\n    withCredentials: true,\n    headers: {\n        'API-KEY': 'c8be0b36-3ac5-42a7-89ea-e79ef5d95007'\n    }\n})\n\nexport const taskApi = {\n    getTask(todolistId: string) {\n        return instance.get<GetTaskType>(`/todo-lists/${todolistId}/tasks`)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`/todo-lists/${todolistId}/tasks`, {title})\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete(`/todo-lists/${todolistId}/tasks/${taskId}`)\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\n    }\n}\n\n//types\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\n\ntype GetTaskType = {\n    items: TaskType[]\n    error: string | null\n    totalCount: number\n}\n\ntype ResponseType<T ={}> = {\n    data: T\n    fieldsErrors: string[]\n    messages: string[]\n    resultCode: number\n}\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\ntype UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {TaskStatuses, UpdateTaskModelType} from \"../api/todolist-api\";\nimport {Dispatch} from \"redux\";\nimport {taskApi, TaskPriorities, TaskType} from \"../api/task-api\";\nimport {TasksStateType} from \"../AppWithRedux\";\nimport {AppRootStateType} from \"./store\";\n\ntype ActionsType = ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof addTaskAC>\n    | ReturnType<typeof updateTaskAC>\n    | ReturnType<typeof setTaskAC>\n\nconst initialState: TasksStateType = {}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n    switch (action.type) {\n        case 'REMOVE-TASK': {\n            const stateCopy = {...state}\n            stateCopy[action.todolistId] = stateCopy[action.todolistId].filter(t => t.id !== action.taskId);\n            return stateCopy;\n        }\n        case 'ADD-TASK': {\n            const stateCopy = {...state}\n            const tasks = stateCopy[action.task.todoListId];\n            stateCopy[action.task.todoListId] = [action.task, ...tasks];\n            return stateCopy;\n        }\n        case 'UPDATE-TASK': {\n            // debugger\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId]\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\n            }\n        }\n        case \"SET-TASKS\": {\n            const copyState = {...state}\n            copyState[action.todolistId] = action.tasks\n            return copyState\n        }\n        default:\n            return state;\n    }\n}\n\nexport const removeTaskAC = (todolistId: string, taskId: string) => {\n    return {type: 'REMOVE-TASK', todolistId, taskId} as const\n}\nexport const addTaskAC = (task: TaskType) => {\n    return {type: 'ADD-TASK', task} as const\n}\nexport const updateTaskAC = (todolistId: string, taskId: string, model: UpdateDomainTaskModelType) => {\n    return {type: 'UPDATE-TASK', todolistId, taskId, model} as const\n}\n\nexport const setTaskAC = (tasks: TaskType[], todolistId: string) => {\n    return {type: 'SET-TASKS', tasks, todolistId} as const\n}\n\n//Thunk\nexport const setTasksTC = (todolistId: string) => {\n    return (dispatch: Dispatch) => {\n        taskApi.getTask(todolistId)\n            .then((res) => {\n                let tasks = res.data.items\n                dispatch(setTaskAC(tasks, todolistId))\n            })\n    }\n}\n\nexport const removeTaskTC = (todolistId: string, taskId: string) => {\n    return (dispatch: Dispatch) => {\n        taskApi.deleteTask(todolistId, taskId)\n            .then((res) => {\n                // let tasks = res.data.items\n                dispatch(removeTaskAC(todolistId, taskId))\n            })\n    }\n}\n\nexport const addTaskTC = (todolistId: string, title: string) => {\n    return (dispatch: Dispatch) => {\n        taskApi.createTask(todolistId, title)\n            .then((res) => {\n                dispatch(addTaskAC(res.data.data.item))\n            })\n    }\n}\n\nexport const updateTaskTC = (todolistId: string, taskId: string, domainModel: UpdateDomainTaskModelType) =>\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\n        // debugger\n        const task = getState().tasks[todolistId].find(t => t.id === taskId)\n        if (!task) {\n            //throw new Error(\"task not found in the state\");\n            console.warn('task not found in the state')\n            return\n        }\n\n        const apiModel: UpdateTaskModelType = {\n            deadline: task.deadline,\n            description: task.description,\n            priority: task.priority,\n            startDate: task.startDate,\n            title: task.title,\n            status: task.status,\n            ...domainModel\n        }\n\n        taskApi.updateTask(todolistId, taskId, apiModel)\n            .then(res => {\n                dispatch(updateTaskAC(todolistId, taskId, domainModel))\n            })\n    }\n\n//types\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\n\n","import axios, {AxiosResponse} from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': 'c8be0b36-3ac5-42a7-89ea-e79ef5d95007'\n    }\n})\n\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: D\n}\n\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport const todolistAPI = {\n    getTodolist() {\n        // debugger\n        return instance.get<Array<TodolistType>>('todo-lists')\n    },\n    createTodolist(title: string) {\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>\n        ('todo-lists', {title});\n    },\n    updateTodolist(id: string, title: string) {\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>\n        (`todo-lists/${id}`, {title});\n    },\n    deleteTodolist(id: string) {\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\n    },\n}\n","import {todolistAPI, TodolistType} from \"../api/todolist-api\";\nimport {Dispatch} from \"redux\";\n\nexport type RemoveTodolistActionType = {\n    type: 'REMOVE-TODOLIST',\n    id: string\n}\nexport type AddTodolistActionType = {\n    type: 'ADD-TODOLIST',\n    todolist: TodolistType\n}\nexport type ChangeTodolistTitleActionType = {\n    type: 'CHANGE-TODOLIST-TITLE',\n    id: string\n    title: string\n}\nexport type ChangeTodolistFilterActionType = {\n    type: 'CHANGE-TODOLIST-FILTER',\n    id: string\n    filter: FilterValuesType\n}\n\ntype ActionsType = ReturnType<typeof removeTodolistAC>\n    | ReturnType<typeof addTodolistAC>\n    | ReturnType<typeof changeTodolistFilterAC>\n    | ReturnType<typeof changeTodolistTitleAC>\n    | ReturnType<typeof setTodosAC>\n\nconst initialState: Array<TodolistDomainType> = []\nexport type FilterValuesType = 'all' | 'active' | 'completed';\n\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n}\n\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\n    switch (action.type) {\n        case 'REMOVE-TODOLIST': {\n            return state.filter(tl => tl.id !== action.id)\n        }\n        case 'ADD-TODOLIST': {\n            const newTodolist: TodolistDomainType = {...action.todolist, filter: 'all'}\n            return [newTodolist, ...state]\n        }\n        case 'CHANGE-TODOLIST-TITLE': {\n            const todolist = state.find(tl => tl.id === action.id);\n            if (todolist) {\n                todolist.title = action.title;\n            }\n            return [...state]\n        }\n        case 'CHANGE-TODOLIST-FILTER': {\n            const todolist = state.find(tl => tl.id === action.id);\n            if (todolist) {\n                todolist.filter = action.filter;\n            }\n            return [...state]\n        }\n        case \"SET-TODOS\": {\n            return action.todolists.map(tl => {\n                return {...tl, filter: 'all'}\n            })\n        }\n        default:\n            return state;\n    }\n}\n\nexport const removeTodolistAC = (id: string): RemoveTodolistActionType => {\n    return {type: 'REMOVE-TODOLIST', id} as const\n}\nexport const addTodolistAC = (todolist: TodolistType): AddTodolistActionType => {\n    return {type: 'ADD-TODOLIST', todolist} as const\n}\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title} as const\n}\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter} as const\n}\n\nexport const setTodosAC = (todolists: TodolistType[]) => {\n    return {\n        type: 'SET-TODOS', todolists\n    } as const\n}\nexport type SetTodosActionType = ReturnType<typeof setTodosAC>\n\n\n//THUNK\nexport const setTodosTC = () => (dispatch: Dispatch): void => {\n    // debugger\n//1. side effect\n    todolistAPI.getTodolist()\n        .then((res) => {\n            // debugger\n            // 2. dispatch action (thunk)\n            dispatch(setTodosAC(res.data))\n        })\n}\n\nexport const removeTodolistTC = (id: string) => (dispatch: Dispatch<ActionsType>) => {\n    todolistAPI.deleteTodolist(id)\n        .then((res => {\n            dispatch(removeTodolistAC(id))\n        }))\n}\n\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\n    todolistAPI.createTodolist(title)\n        .then((res) => {\n            dispatch(addTodolistAC(res.data.data.item))\n        })\n}\n\nexport const ChangeTodolistTitleTC = (id: string, title: string) => (dispatch: Dispatch) => {\n    todolistAPI.updateTodolist(id, title)\n        .then((res) => {\n            dispatch(changeTodolistTitleAC(id, title))\n        })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n","import { tasksReducer } from './tasks-reducer';\nimport { todolistsReducer } from './todolists-reducer';\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunk from \"redux-thunk\";\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport IconButton from '@mui/material/IconButton';\nimport { AddBox } from '@mui/icons-material';\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\n    console.log('AddItemForm called')\n\n    let [title, setTitle] = useState('')\n    let [error, setError] = useState<string | null>(null)\n\n    const addItem = () => {\n        if (title.trim() !== '') {\n            props.addItem(title);\n            setTitle('');\n        } else {\n            setError('Title is required');\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null);\n        }\n        if (e.charCode === 13) {\n            addItem();\n        }\n    }\n\n    return <div>\n        <TextField variant=\"outlined\"\n                   error={!!error}\n                   value={title}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   label=\"Title\"\n                   helperText={error}\n        />\n        <IconButton color=\"primary\" onClick={addItem}>\n            <AddBox/>\n        </IconButton>\n    </div>\n})\n","import React, { ChangeEvent, useState } from 'react';\nimport TextField from '@mui/material/TextField';\n\ntype EditableSpanPropsType = {\n    value: string\n    onChange: (newValue: string) => void\n}\n\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\n    console.log('EditableSpan called');\n    let [editMode, setEditMode] = useState(false);\n    let [title, setTitle] = useState(props.value);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n        setTitle(props.value);\n    }\n    const activateViewMode = () => {\n        setEditMode(false);\n        props.onChange(title);\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return editMode\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\n});\n","import React, {ChangeEvent, useCallback} from 'react'\nimport {EditableSpan} from './EditableSpan'\nimport {Delete} from '@mui/icons-material';\nimport IconButton from '@mui/material/IconButton';\nimport Checkbox from '@mui/material/Checkbox';\nimport {TaskStatuses} from \"./api/todolist-api\";\nimport {TaskType} from \"./api/task-api\";\n\n\ntype TaskPropsType = {\n    task: TaskType\n    todolistId: string\n    changeTaskStatus: (todolistId: string, id: string, status: TaskStatuses,) => void\n    changeTaskTitle: (todolistId: string, taskId: string, newTitle: string) => void\n    removeTask: (todolistId: string, taskId: string) => void\n}\nexport const Task = React.memo((props: TaskPropsType) => {\n    const onClickHandler = useCallback(() => props.removeTask(props.todolistId, props.task.id), [props.todolistId, props.task.id]);\n\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked\n        props.changeTaskStatus(props.todolistId, props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New)\n    }, [props.todolistId, props.task.id]);\n\n    const onTitleChangeHandler = useCallback((newValue: string) => {\n        props.changeTaskTitle(props.todolistId, props.task.id, newValue)\n    }, [props.todolistId, props.task.id]);\n\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\n        <Checkbox\n            checked={props.task.status === TaskStatuses.Completed}\n            color=\"primary\"\n            onChange={onChangeHandler}\n        />\n\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\n        <IconButton onClick={onClickHandler}>\n            <Delete/>\n        </IconButton>\n    </div>\n})\n","import React, {useCallback, useEffect} from 'react'\nimport {AddItemForm} from './AddItemForm'\nimport {EditableSpan} from './EditableSpan'\nimport IconButton from '@mui/material/IconButton';\nimport Button from '@mui/material/Button';\nimport {Delete} from '@mui/icons-material';\nimport {Task} from './Task'\nimport {TaskStatuses} from \"./api/todolist-api\";\nimport {FilterValuesType} from \"./state/todolists-reducer\";\nimport {useDispatch} from \"react-redux\";\nimport {setTasksTC} from \"./state/tasks-reducer\";\nimport {TaskType} from \"./api/task-api\";\n\ntype PropsType = {\n    id: string\n    title: string\n    tasks: Array<TaskType>\n    changeFilter: (todolistId: string, value: FilterValuesType) => void\n    addTask: (todolistId: string, title: string) => void\n    changeTaskStatus: (todolistId: string, taskId: string, status: TaskStatuses) => void\n    changeTaskTitle: (todolistId: string, taskId: string, newTitle: string) => void\n    removeTask: (todolistId: string, taskId: string) => void\n    removeTodolist: (todolistId: string) => void\n    changeTodolistTitle: (id: string, newTitle: string) => void\n    filter: FilterValuesType\n}\n\nexport const Todolist = React.memo(function (props: PropsType) {\n    console.log('Todolist called')\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(setTasksTC(props.id))\n    }, [dispatch])\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(props.id, title)\n    }, [props.addTask, props.id])\n\n    const removeTodolist = (id: any) => {\n        props.removeTodolist(props.id)\n    }\n\n    const changeTodolistTitle = useCallback((title: string) => {\n        props.changeTodolistTitle(props.id, title)\n    }, [props.id, props.changeTodolistTitle])\n\n    const onAllClickHandler = useCallback(() => props.changeFilter(props.id, 'all',), [props.id, props.changeFilter])\n    const onActiveClickHandler = useCallback(() => props.changeFilter(props.id, 'active'), [props.id, props.changeFilter])\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(props.id, 'completed'), [props.id, props.changeFilter])\n\n    let tasksForTodolist = props.tasks\n\n    if (props.filter === 'active') {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\n    }\n    if (props.filter === 'completed') {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\n    }\n\n    return <div>\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\n            <IconButton onClick={removeTodolist}>\n                <Delete/>\n            </IconButton>\n        </h3>\n        <AddItemForm addItem={addTask}/>\n        <div>\n            {\n                tasksForTodolist?.map(t => <Task key={t.id} task={t} todolistId={props.id}\n                                                 removeTask={props.removeTask}\n                                                 changeTaskTitle={props.changeTaskTitle}\n                                                 changeTaskStatus={props.changeTaskStatus}\n                />)\n            }\n        </div>\n        <div style={{paddingTop: '10px'}}>\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\n                    onClick={onAllClickHandler}\n                    color={'inherit'}\n            >All\n            </Button>\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\n                    onClick={onActiveClickHandler}\n                    color={'primary'}>Active\n            </Button>\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\n                    onClick={onCompletedClickHandler}\n                    color={'secondary'}>Completed\n            </Button>\n        </div>\n    </div>\n})\n\n\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    ChangeTodolistTitleTC,\r\n    removeTodolistTC, setTodosTC,\r\n} from \"./state/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    addTaskTC,\r\n    removeTaskTC, updateTaskTC\r\n} from \"./state/tasks-reducer\";\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport Button from \"@mui/material/Button\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport {TaskStatuses} from \"./api/todolist-api\";\r\nimport {TaskType} from \"./api/task-api\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        // debugger\r\n        dispatch(setTodosTC())\r\n    }, [dispatch])\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    // debugger\r\n    const removeTask = useCallback((todolistId: string, id: string) => {\r\n        dispatch(removeTaskTC(todolistId, id))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((todolistId: string, title: string) => {\r\n        dispatch(addTaskTC(todolistId, title))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((todolistId: string, taskId: string, status: TaskStatuses) => {\r\n        dispatch(updateTaskTC(todolistId, taskId, {status}))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((todolistId: string, taskId: string, title: string) => {\r\n        dispatch(updateTaskTC(todolistId, taskId, {title}))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((todolistId: string, value: FilterValuesType) => {\r\n        dispatch(changeTodolistFilterAC(todolistId, value))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistTC(todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        dispatch(ChangeTodolistTitleTC(id, title))\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists?.map(tl => {\r\n\r\n                            let tasksForTodolist = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './state/store';\nimport AppWithRedux from \"./AppWithRedux\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <AppWithRedux/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}