{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","callBack","useState","title","setTitle","error","setError","addTask","newTitle","trim","TextField","value","label","variant","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","color","ControlPoint","EditableSpan","props","edit","setEdit","onBlur","autoFocus","onDoubleClick","Todolist","updateTodolistTitle","id","removeTodolist","Delete","tasks","map","t","key","className","isDone","Checkbox","newIsDoneValue","checked","changeTaskStatus","updateTask","removeTask","Button","filter","changeFilter","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","todolistId","f","changeStatus","m","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","newTodolistId","spacing","tl","allTodolistTasks","tasksForTodolist","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0e73d959.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\n\r\n\r\ntype PropsType = {\r\n    callBack: (title: string) => void\r\n}\r\n\r\n\r\nexport const AddItemForm = ({callBack}: PropsType) => {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        let newTitle = title.trim();\r\n        if (newTitle !== \"\") {\r\n            callBack(newTitle);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n\r\n            <TextField value={title}\r\n                       label=\"Type value\"\r\n                       variant={\"outlined\"}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       helperText={error}\r\n            />\r\n\r\n            <IconButton onClick={addTask} color={\"primary\"}>\r\n                <ControlPoint/>\r\n            </IconButton>\r\n\r\n            {/*{error && <div className=\"error-message\">{error}</div>}*/}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    callBack: (title: string) => void\r\n\r\n}\r\n\r\nexport const EditableSpan = (props: PropsType) => {\r\n    let [edit, setEdit] = useState(false)\r\n    let [title, setTitle] = useState(props.title)\r\n    const editON = () => {\r\n        setEdit(true)\r\n    }\r\n\r\n    const editOFF = () => {\r\n        setEdit(false)\r\n        props.callBack(title)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n        edit\r\n            ? <TextField value={title} onBlur={editOFF} autoFocus onChange={onChangeHandler}/>\r\n            : <span onDoubleClick={editON}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {EditableSpan} from \"./components/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    filter: FilterValuesType\r\n    updateTask: (title: string, todolistId: string, id: string) => void\r\n    updateTodolistTitle: (title: string, todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n    const addTaskHandler = (title: string) => props.addTask(title, props.id)\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n    const editableSpanHandlerForTodolist = (title: string) => {\r\n        props.updateTodolistTitle(title, props.id)\r\n    }\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan title={props.title} callBack={editableSpanHandlerForTodolist}/>\r\n\r\n\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n\r\n        </h3>\r\n        <AddItemForm callBack={addTaskHandler}/>\r\n        <div>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n                    const updateTaskHandler = (title: string) => {\r\n                        props.updateTask(title, props.id, t.id)\r\n                    }\r\n                    return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox onChange={onChangeHandler} checked={t.isDone}/>\r\n                        <EditableSpan title={t.title} callBack={updateTaskHandler}/>\r\n\r\n                        <IconButton onClick={onClickHandler}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button variant={props.filter === 'all' ? \"contained\" : \"text\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button color={\"primary\"} variant={props.filter === 'active' ? \"contained\" : \"text\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button color={\"secondary\"} variant={props.filter === 'completed' ? \"contained\" : \"text\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to listen\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: true},\r\n            {id: v1(), title: \"Redux\", isDone: false},\r\n            {id: v1(), title: \"TypeScript\", isDone: true},\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Bon Jovi\", isDone: true},\r\n            {id: v1(), title: \"The Beatles\", isDone: true},\r\n            {id: v1(), title: \"Scorpions\", isDone: true},\r\n        ]\r\n    });\r\n\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        // //достанем нужный массив по todolistId:\r\n        // let todolistTasks = tasks[todolistId];\r\n        // // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        // tasks[todolistId] = todolistTasks.filter(t => t.id != id);\r\n        // // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        // setTasks({...tasks});\r\n        setTasks({...tasks, [todolistId]: tasks[todolistId].filter(f => f.id !== id)})\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        // let task = {id: v1(), title: title, isDone: false};\r\n        // //достанем нужный массив по todolistId:\r\n        // let todolistTasks = tasks[todolistId];\r\n        // // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        // tasks[todolistId] = [task, ...todolistTasks];\r\n        // // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        // setTasks({...tasks});\r\n        setTasks({...tasks, [todolistId]: [{id: v1(), title: title, isDone: false}, ...tasks[todolistId]]})\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        // //достанем нужный массив по todolistId:\r\n        // let todolistTasks = tasks[todolistId];\r\n        // // найдём нужную таску:\r\n        // let task = todolistTasks.find(t => t.id === id);\r\n        // //изменим таску, если она нашлась\r\n        // if (task) {\r\n        //     task.isDone = isDone;\r\n        //     // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        //     setTasks({...tasks});\r\n        // }\r\n        setTasks({...tasks, [todolistId]: tasks[todolistId].map(m => m.id === id ? {...m, isDone: isDone} : m)})\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        // let todolist = todolists.find(tl => tl.id === todolistId);\r\n        // if (todolist) {\r\n        //     todolist.filter = value;\r\n        //     setTodolists([...todolists])\r\n        // }\r\n        setTodolists(todolists.map(m => m.id === todolistId ? {...m, filter: value} : m))\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        // setTodolists(todolists.filter(tl => tl.id != id));\r\n        // // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        // delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        // setTasks({...tasks});\r\n        setTodolists(todolists.filter(f => f.id !== id))\r\n    }\r\n\r\n    const addTodolist = (title: string) => {\r\n        let newTodolistId = v1()\r\n        setTodolists([{id: newTodolistId, title: title, filter: \"all\"}, ...todolists])\r\n        setTasks({...tasks, [newTodolistId]: []})\r\n\r\n    }\r\n    const updateTask = (title: string, todolistId: string, id: string) => {\r\n        setTasks({...tasks, [todolistId]: tasks[todolistId].map(m => m.id === id ? {...m, title: title} : m)})\r\n    }\r\n    const updateTodolistTitle = (title: string, todolistId: string) => {\r\n        setTodolists(todolists.map(m => m.id === todolistId ? {...m, title: title} : m))\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                    >\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm callBack={addTodolist}/>\r\n                </Grid>\r\n\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                            }\r\n\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        updateTask={updateTask}\r\n                                        updateTodolistTitle={updateTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}