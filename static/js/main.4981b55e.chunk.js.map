{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onTitleChangeHandler","useCallback","newTitle","changeTaskTitle","todolistId","task","id","key","className","isDone","Checkbox","checked","newIsDoneValue","changeTaskStatus","removeTask","Delete","Todolist","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","tasks","filter","t","removeTodolist","map","style","paddingTop","Button","initialState","AppWithRedux","dispatch","useDispatch","todolists","useSelector","state","type","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","changeTaskTitleAC","changeTodolistFilterAC","action","removeTodolistAC","changeTodolistTitleAC","addTodolist","v1","addTodolistAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","item","Paper","rootReducer","combineReducers","f","todolist","find","stateCopy","newTask","todolistTasks","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4981b55e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    console.log('AddItemForm is called')\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n})\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"./Todolist\";\r\n\r\ntype TaskPropsType = {\r\n    changeTaskStatus: (todolistId: string, id: string, isDone: boolean) => void\r\n    changeTaskTitle: (todolistId: string, taskId: string, newTitle: string) => void\r\n    removeTask: (todolistId: string, taskId: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = () => props.removeTask(props.todolistId, props.task.id)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeTaskStatus(props.todolistId, props.task.id, newIsDoneValue);\r\n    }\r\n    const onTitleChangeHandler = useCallback((newTitle: string) => {\r\n        props.changeTaskTitle(props.todolistId, props.task.id, newTitle);\r\n    }, [props.changeTaskTitle, props.todolistId, props.task.id])\r\n\r\n\r\n    return <div key={props.task.id} className={props.task.isDone ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={props.task.isDone}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback} from 'react';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {FilterValuesType} from \"./AppWithRedux\";\r\nimport {Task} from \"./Task\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (todolistId: string, value: FilterValuesType) => void\r\n    addTask: (todolistId: string, title: string) => void\r\n    changeTaskStatus: (todolistId: string, id: string, isDone: boolean) => void\r\n    changeTaskTitle: (todolistId: string, taskId: string, newTitle: string) => void\r\n    removeTask: (todolistId: string, taskId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    console.log('Todolist is called')\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(props.id, title)\r\n    }, [props.addTask, props.id, props.title])\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(props.id, \"all\"), [props.changeFilter, props.id]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(props.id, \"active\"), [props.changeFilter, props.id]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(props.id, \"completed\"), [props.changeFilter, props.id]);\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => !t.isDone);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone);\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    removeTask={props.removeTask}\r\n                    task={t}\r\n                    todolistId={props.id}\r\n                    key={t.id}/>\r\n                )\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {v1} from \"uuid\";\r\nimport {FilterValuesType, TodolistType} from \"../AppWithRedux\";\r\n\r\nexport type ActionsType =\r\n    ReturnType<typeof removeTodolistAC> |\r\n    ReturnType<typeof addTodolistAC> |\r\n    ReturnType<typeof changeTodolistTitleAC> |\r\n    ReturnType<typeof changeTodolistFilterAC>\r\n\r\nconst initialState: Array<TodolistType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(f => f.id !== action.id)\r\n        }\r\n\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }, ...state,]\r\n        }\r\n\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            let todolist = state.find(f => f.id === action.id)\r\n            if (todolist) {\r\n                todolist.title = action.title\r\n            }\r\n            return [...state]\r\n        }\r\n\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            let todolist = state.find(f => f.id === action.todolistId)\r\n            if (todolist) {\r\n                todolist.filter = action.filter\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id}) as const\r\nexport const addTodolistAC = (title: string) => ({type: 'ADD-TODOLIST', title, todolistId: v1()}) as const\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n}) as const\r\nexport const changeTodolistFilterAC = (todolistId: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    todolistId,\r\n    filter\r\n}) as const\r\n\r\n","import {TaskType} from \"../Todolist\";\r\nimport {addTodolistAC, removeTodolistAC} from \"./todolists-reducer\";\r\nimport {TasksStateType} from \"../AppWithRedux\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type ActionsType =\r\n    ReturnType<typeof removeTaskAC> |\r\n    ReturnType<typeof addTaskAC> |\r\n    ReturnType<typeof changeTaskStatusAC> |\r\n    ReturnType<typeof changeTaskTitleAC> |\r\n    ReturnType<typeof addTodolistAC> |\r\n    ReturnType<typeof removeTodolistAC>\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            stateCopy[action.todolistId] = tasks.filter(t => t.id != action.id);\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask: TaskType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false\r\n            }\r\n            const tasks = stateCopy[action.todolistId];\r\n            stateCopy[action.todolistId] = [newTask, ...tasks];\r\n            return stateCopy;\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            let todolistTasks = state[action.todolistId];\r\n            state[action.todolistId] = todolistTasks\r\n                .map(t => t.id === action.id\r\n                    ? {...t, isDone: action.isDone}\r\n                    : t);\r\n            return ({...state});\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            let todolistTasks = state[action.todolistId];\r\n            state[action.todolistId] = todolistTasks\r\n                .map(t => t.id === action.id\r\n                    ? {...t, title: action.title}\r\n                    : t);\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = [];\r\n            return stateCopy\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (todolistId: string, id: string) => ({type: 'REMOVE-TASK', todolistId, id}) as const\r\nexport const addTaskAC = (todolistId: string, title: string) => ({type: 'ADD-TASK', todolistId, title}) as const\r\nexport const changeTaskStatusAC = (todolistId: string, id: string, isDone: boolean) => ({\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId,\r\n    id,\r\n    isDone\r\n}) as const\r\nexport const changeTaskTitleAC = (todolistId: string, id: string, title: string) => ({\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId,\r\n    id,\r\n    title\r\n}) as const\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n} from \"./state/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./state/store\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n    console.log('App is called')\r\n    const dispatch = useDispatch()\r\n    const todolists = useSelector<AppRootState, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootState, TasksStateType>(state => state.tasks)\r\n\r\n    const removeTask = useCallback((todolistId: string, id: string) => {\r\n        dispatch(removeTaskAC(todolistId, id))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((todolistId: string, title: string) => {\r\n        dispatch(addTaskAC(todolistId, title))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((todolistId: string, id: string, isDone: boolean) => {\r\n        dispatch(changeTaskStatusAC(todolistId, id, isDone))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((todolistId: string, id: string, newTitle: string) => {\r\n        dispatch(changeTaskTitleAC(todolistId, id, newTitle))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((todolistId: string, value: FilterValuesType) => {\r\n        dispatch(changeTodolistFilterAC(todolistId, value))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        const action = removeTodolistAC(id)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        dispatch(changeTodolistTitleAC(id, title))\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodolistAC(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}