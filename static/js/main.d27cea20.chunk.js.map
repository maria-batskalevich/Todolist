{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/authReducer.ts","app/app-reducer.tsx","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","process","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","console","warn","clearTodosDataAC","fetchTodolistsTC","todolists","todos","forEach","tl","items","setTasksAC","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","addTask","useDispatch","todolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","useSelector","state","auth","useEffect","thunk","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","justifyContent","handleSubmit","FormControl","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","finally","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","path","element","textAlign","top","CircularProgress","rootReducer","combineReducers","todoListId","copyState","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d27cea20.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: process.env.REACT_APP_BASE_URL,\r\n    withCredentials: true,\r\n    headers: {\r\n        // @ts-ignore\r\n        'API-KEY': process.env.REACT_APP_API_KEY\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data:LoginParamsType) {\r\n        return instance.post<ResponseType<{userId?: number}>>(`auth/login`, data)\r\n        // return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>(`auth/login`, data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{userId?: number}>>(`auth/login`)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<meResponseType>>('auth/me')\r\n    },\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type LoginParamsType = {\r\n    email: string | undefined\r\n    password: string | undefined\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\ntype meResponseType = {\r\n    id: number\r\n    email: string | undefined\r\n    login: string | undefined\r\n    // password: string\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppErrorAC, setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {clearTodosDataAC} from \"../TodolistsList/todolists-reducer\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(clearTodosDataAC())\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof clearTodosDataAC>\r\n\r\n","import {setIsLoggedInAC} from \"../features/Login/authReducer\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status} as InitialStateType\r\n        case \"'APP/SET-ERROR'\": {\r\n            return {...state, error: action.error}\r\n        }\r\n        case \"APP/SET-ISINITIALIZED\":\r\n            return {...state, isInitialized: action.isInitialized}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: string) => ({type: \"APP/SET-STATUS\", status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: \"'APP/SET-ERROR'\", error} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-ISINITIALIZED', isInitialized} as const)\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetIsInitializedACActionType = ReturnType<typeof setIsInitializedAC>\r\n\r\ntype AppActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetIsInitializedACActionType\r\n\r\n","import {\r\n    AddTodolistActionType,\r\n    clearTodosDataAC,\r\n    RemoveTodolistActionType,\r\n    SetTodolistsActionType\r\n} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        case \"CLEAR-DATA\":\r\n            return {}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof clearTodosDataAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {fetchTasksTC} from \"./tasks-reducer\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case \"CLEAR-DATA\":\r\n            return []\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\nexport const clearTodosDataAC = () => ({type: 'CLEAR-DATA'} as const)\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: any) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                return res.data\r\n            })\r\n            .then((todos) => {\r\n                todos.forEach((tl) => {\r\n                    dispatch(fetchTasksTC(tl.id))\r\n                })\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | ReturnType<typeof clearTodosDataAC>\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    const dispatch = useDispatch()\r\n\r\n    // useEffect(() => {\r\n    //     if (demo) {\r\n    //         return\r\n    //     }\r\n    //     const thunk = fetchTasksTC(props.todolist.id)\r\n    //     dispatch(thunk)\r\n    // }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\n// type PropsType = {\r\n//     demo?: boolean\r\n// }\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            dispatch(fetchTodolistsTC())\r\n        }\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to='/login'/>\r\n    }\r\n    // debugger\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {LoginParamsType} from \"../../api/todolists-api\";\r\nimport {loginTC} from \"./authReducer\";\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: process.env.REACT_APP_EMAIL,\r\n            password: process.env.REACT_APP_PASSWORD,\r\n            rememberMe: true\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Pick<LoginParamsType, 'password' | 'email' | 'rememberMe'>> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Password length should be more than 3'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/it-inc-todolist/'}/>\r\n    }\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup className={'loginForm'}>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel label={'Remember me'} control={\r\n                            <Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {logoutTC} from \"../features/Login/authReducer\";\r\n\r\n\r\nfunction App() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={\"it-inc-todolist\"} element={<TodolistsList/>}/>\r\n                    <Route path={\"login\"} element={<Login/>}/>\r\n                    <Route path={\"*\"} element={<h1 style={{textAlign: 'center'}}>404. Page not found</h1>}/>\r\n                </Routes>\r\n\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {authReducer} from \"../features/Login/authReducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <BrowserRouter>\n            <App/>\n            </BrowserRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}